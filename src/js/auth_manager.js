/**
 * Gestionnaire d'authentification pour SYNERGIA v3.0
 * Fichier: src/js/managers/AuthManager.js
 */
class AuthManager {
    constructor() {
        this.auth = null;
        this.firestore = null;
        this.currentUser = null;
        this.userProfile = null;
        this.listeners = new Map();
        this.eventEmitter = new EventTarget();
        
        this.init();
    }

    /**
     * Initialise le gestionnaire d'authentification
     */
    async init() {
        try {
            // Attendre que Firebase soit pr√™t
            await firebaseService.waitForInitialization();
            
            this.auth = firebaseService.getAuth();
            this.firestore = firebaseService.getFirestore();
            
            // √âcouter les changements d'√©tat d'authentification
            this.auth.onAuthStateChanged((user) => {
                this.handleAuthStateChange(user);
            });
            
            console.log('‚úÖ AuthManager initialis√©');
            
        } catch (error) {
            console.error('‚ùå Erreur AuthManager:', error);
            throw error;
        }
    }

    /**
     * G√®re les changements d'√©tat d'authentification
     * @param {firebase.User|null} user 
     */
    async handleAuthStateChange(user) {
        try {
            this.currentUser = user;
            
            if (user) {
                console.log('üë§ Utilisateur connect√©:', user.email);
                
                // Charger le profil utilisateur
                await this.loadUserProfile(user.uid);
                
                // Mettre √† jour la derni√®re connexion
                await this.updateLastSeen();
                
                // √âmettre l'√©v√©nement de connexion
                this.emit('user:login', {
                    user: this.currentUser,
                    profile: this.userProfile
                });
                
            } else {
                console.log('üë§ Utilisateur d√©connect√©');
                this.userProfile = null;
                
                // √âmettre l'√©v√©nement de d√©connexion
                this.emit('user:logout');
            }
            
            // √âmettre l'√©v√©nement de changement d'√©tat
            this.emit('auth:stateChanged', {
                user: this.currentUser,
                profile: this.userProfile,
                isAuthenticated: !!user
            });
            
        } catch (error) {
            console.error('Erreur lors du changement d\'√©tat auth:', error);
            this.handleError(error);
        }
    }

    /**
     * Connexion avec Google
     * @returns {Promise<Object>}
     */
    async signInWithGoogle() {
        try {
            console.log('üîê Connexion Google...');
            
            const provider = new firebase.auth.GoogleAuthProvider();
            provider.addScope('email');
            provider.addScope('profile');
            
            // Configuration du provider
            provider.setCustomParameters({
                prompt: 'select_account'
            });
            
            const result = await this.auth.signInWithPopup(provider);
            const user = result.user;
            
            console.log('‚úÖ Connexion Google r√©ussie:', user.email);
            
            // Cr√©er ou mettre √† jour le profil utilisateur
            await this.createOrUpdateUserProfile(user);
            
            return {
                success: true,
                user: user,
                profile: this.userProfile
            };
            
        } catch (error) {
            console.error('‚ùå Erreur connexion Google:', error);
            
            // Gestion des erreurs sp√©cifiques
            if (error.code === 'auth/popup-closed-by-user') {
                throw new Error('Connexion annul√©e par l\'utilisateur');
            } else if (error.code === 'auth/unauthorized-domain') {
                throw new Error('Domaine non autoris√©. Contactez l\'administrateur.');
            }
            
            throw error;
        }
    }

    /**
     * Connexion avec email/mot de passe
     * @param {string} email 
     * @param {string} password 
     * @returns {Promise<Object>}
     */
    async signInWithEmail(email, password) {
        try {
            console.log('üîê Connexion email:', email);
            
            const result = await this.auth.signInWithEmailAndPassword(email, password);
            const user = result.user;
            
            console.log('‚úÖ Connexion email r√©ussie:', user.email);
            
            return {
                success: true,
                user: user,
                profile: this.userProfile
            };
            
        } catch (error) {
            console.error('‚ùå Erreur connexion email:', error);
            
            // Messages d'erreur personnalis√©s
            const errorMessages = {
                'auth/user-not-found': 'Aucun compte trouv√© avec cette adresse email',
                'auth/wrong-password': 'Mot de passe incorrect',
                'auth/invalid-email': 'Adresse email invalide',
                'auth/too-many-requests': 'Trop de tentatives. R√©essayez plus tard',
                'auth/user-disabled': 'Ce compte a √©t√© d√©sactiv√©'
            };
            
            const message = errorMessages[error.code] || error.message;
            throw new Error(message);
        }
    }

    /**
     * Inscription avec email/mot de passe
     * @param {string} email 
     * @param {string} password 
     * @param {Object} userData 
     * @returns {Promise<Object>}
     */
    async signUpWithEmail(email, password, userData = {}) {
        try {
            console.log('üìù Inscription email:', email);
            
            const result = await this.auth.createUserWithEmailAndPassword(email, password);
            const user = result.user;
            
            // Mettre √† jour le profil Firebase
            if (userData.displayName) {
                await user.updateProfile({
                    displayName: userData.displayName
                });
            }
            
            // Cr√©er le profil utilisateur en base
            await this.createUserProfile(user, userData);
            
            console.log('‚úÖ Inscription r√©ussie:', user.email);
            
            return {
                success: true,
                user: user,
                profile: this.userProfile
            };
            
        } catch (error) {
            console.error('‚ùå Erreur inscription:', error);
            
            const errorMessages = {
                'auth/email-already-in-use': 'Cette adresse email est d√©j√† utilis√©e',
                'auth/weak-password': 'Le mot de passe est trop faible',
                'auth/invalid-email': 'Adresse email invalide'
            };
            
            const message = errorMessages[error.code] || error.message;
            throw new Error(message);
        }
    }

    /**
     * D√©connexion
     * @returns {Promise<void>}
     */
    async signOut() {
        try {
            console.log('üö™ D√©connexion...');
            
            // Nettoyer les donn√©es locales
            this.clearLocalData();
            
            // D√©connexion Firebase
            await this.auth.signOut();
            
            console.log('‚úÖ D√©connexion r√©ussie');
            
        } catch (error) {
            console.error('‚ùå Erreur d√©connexion:', error);
            throw error;
        }
    }

    /**
     * Charge le profil utilisateur depuis Firestore
     * @param {string} uid 
     */
    async loadUserProfile(uid) {
        try {
            const docRef = this.firestore.collection('users').doc(uid);
            const doc = await docRef.get();
            
            if (doc.exists) {
                this.userProfile = {
                    id: uid,
                    ...doc.data()
                };
                console.log('üìÑ Profil utilisateur charg√©');
            } else {
                console.log('üìÑ Aucun profil trouv√©, cr√©ation...');
                await this.createUserProfile(this.currentUser);
            }
            
        } catch (error) {
            console.error('Erreur chargement profil:', error);
        }
    }

    /**
     * Cr√©e ou met √† jour le profil utilisateur
     * @param {firebase.User} user 
     * @param {Object} additionalData 
     */
    async createOrUpdateUserProfile(user, additionalData = {}) {
        try {
            const userRef = this.firestore.collection('users').doc(user.uid);
            const doc = await userRef.get();
            
            const baseData = {
                email: user.email,
                displayName: user.displayName || '',
                photoURL: user.photoURL || '',
                emailVerified: user.emailVerified,
                lastSeen: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            if (doc.exists) {
                // Mise √† jour
                await userRef.update({
                    ...baseData,
                    ...additionalData
                });
                console.log('üìù Profil utilisateur mis √† jour');
            } else {
                // Cr√©ation
                await this.createUserProfile(user, additionalData);
            }
            
            // Recharger le profil
            await this.loadUserProfile(user.uid);
            
        } catch (error) {
            console.error('Erreur cr√©ation/MAJ profil:', error);
        }
    }

    /**
     * Cr√©e un nouveau profil utilisateur
     * @param {firebase.User} user 
     * @param {Object} additionalData 
     */
    async createUserProfile(user, additionalData = {}) {
        try {
            const userData = {
                email: user.email,
                displayName: user.displayName || additionalData.displayName || '',
                photoURL: user.photoURL || '',
                emailVerified: user.emailVerified,
                
                // Donn√©es SYNERGIA
                role: additionalData.role || 'employee',
                department: additionalData.department || '',
                position: additionalData.position || '',
                startDate: additionalData.startDate || firebase.firestore.FieldValue.serverTimestamp(),
                
                // Gamification
                xp: 0,
                level: 1,
                badges: [],
                quests: [],
                
                // Pr√©f√©rences
                preferences: {
                    theme: 'dark',
                    notifications: true,
                    language: 'fr'
                },
                
                // Timestamps
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
                lastSeen: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            await this.firestore.collection('users').doc(user.uid).set(userData);
            
            this.userProfile = {
                id: user.uid,
                ...userData
            };
            
            console.log('‚úÖ Profil utilisateur cr√©√©');
            
        } catch (error) {
            console.error('Erreur cr√©ation profil:', error);
            throw error;
        }
    }

    /**
     * Met √† jour la derni√®re activit√©
     */
    async updateLastSeen() {
        try {
            if (this.currentUser) {
                await this.firestore.collection('users').doc(this.currentUser.uid).update({
                    lastSeen: firebase.firestore.FieldValue.serverTimestamp()
                });
            }
        } catch (error) {
            console.error('Erreur mise √† jour lastSeen:', error);
        }
    }

    /**
     * Met √† jour le profil utilisateur
     * @param {Object} updates 
     */
    async updateProfile(updates) {
        try {
            if (!this.currentUser) {
                throw new Error('Aucun utilisateur connect√©');
            }
            
            const userRef = this.firestore.collection('users').doc(this.currentUser.uid);
            
            await userRef.update({
                ...updates,
                updatedAt: firebase.firestore.FieldValue.serverTimestamp()
            });
            
            // Recharger le profil
            await this.loadUserProfile(this.currentUser.uid);
            
            this.emit('profile:updated', this.userProfile);
            
            console.log('‚úÖ Profil mis √† jour');
            
        } catch (error) {
            console.error('Erreur mise √† jour profil:', error);
            throw error;
        }
    }

    /**
     * R√©initialisation mot de passe
     * @param {string} email 
     */
    async resetPassword(email) {
        try {
            await this.auth.sendPasswordResetEmail(email);
            console.log('üìß Email de r√©initialisation envoy√©');
        } catch (error) {
            console.error('Erreur r√©initialisation:', error);
            throw error;
        }
    }

    /**
     * V√©rifie si l'utilisateur est connect√©
     * @returns {boolean}
     */
    isAuthenticated() {
        return !!this.currentUser;
    }

    /**
     * R√©cup√®re l'utilisateur actuel
     * @returns {firebase.User|null}
     */
    getCurrentUser() {
        return this.currentUser;
    }

    /**
     * R√©cup√®re le profil utilisateur
     * @returns {Object|null}
     */
    getUserProfile() {
        return this.userProfile;
    }

    /**
     * V√©rifie les permissions utilisateur
     * @param {string} permission 
     * @returns {boolean}
     */
    hasPermission(permission) {
        if (!this.userProfile) return false;
        
        const permissions = {
            'admin': ['admin'],
            'manager': ['admin', 'manager'],
            'employee': ['admin', 'manager', 'employee']
        };
        
        const userRole = this.userProfile.role || 'employee';
        return permissions[permission]?.includes(userRole) || false;
    }

    /**
     * Nettoie les donn√©es locales
     */
    clearLocalData() {
        this.userProfile = null;
        // Nettoyer localStorage si n√©cessaire
    }

    /**
     * Gestion des erreurs
     * @param {Error} error 
     */
    handleError(error) {
        const errorInfo = firebaseService.handleError(error);
        this.emit('auth:error', errorInfo);
    }

    /**
     * √âmet un √©v√©nement
     * @param {string} eventName 
     * @param {Object} data 
     */
    emit(eventName, data = null) {
        const event = new CustomEvent(eventName, { detail: data });
        this.eventEmitter.dispatchEvent(event);
        
        // Aussi √©mettre sur window pour compatibilit√©
        window.dispatchEvent(event);
    }

    /**
     * √âcoute un √©v√©nement
     * @param {string} eventName 
     * @param {Function} callback 
     */
    on(eventName, callback) {
        this.eventEmitter.addEventListener(eventName, callback);
    }

    /**
     * Supprime un √©couteur d'√©v√©nement
     * @param {string} eventName 
     * @param {Function} callback 
     */
    off(eventName, callback) {
        this.eventEmitter.removeEventListener(eventName, callback);
    }

    /**
     * Nettoyage lors de la destruction
     */
    destroy() {
        this.clearLocalData();
        this.listeners.clear();
    }
}

// Export pour utilisation globale
window.AuthManager = AuthManager;